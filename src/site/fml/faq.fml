<?xml version="1.0" encoding="UTF-8"?>

<faqs xmlns="http://maven.apache.org/FML/1.0.1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/FML/1.0.1 http://maven.apache.org/xsd/fml-1.0.1.xsd"
  id="FAQ" title="Frequently Asked Questions">
 <part id="General">

   <faq id="what is checkmarx maven plugin">
     <question>What is the Checkmarx Maven Plugin exactly?</question>
     <answer>
       <p>
         The Checkmarx Maven Plugin is a reliable and easy to use plugin for the Apache Maven tool.
       </p>
       <p>
         The plugin allows you to run the Checkmarx static application security test (SAST),
         as a stand-alone scan, or as part of any of the Maven life-cycles.
       </p>
     </answer>
   </faq>

   <faq id="how to use">
     <question>
       How can I use the Checkmarx Maven Plugin in my projects?
     </question>
     <answer>
       <p>
         Use can read about the usage and configuration of the plugin in the <a href="usage.html">Usage</a>
       </p>
       <p>
         and <a href="examples/example1.html">Examples</a> sections of this document.
       </p>
     </answer>
    </faq>

    <faq id="missing">
      <question>Why am I getting errors that a documented goal or parameter is missing?</question>
      <answer><p>The latest documents are published and may preceed the actual release. Check to make sure the goal/parameter is in the most recent version.
        <b> -OR- </b>
        Maven may be resolving the older codehaus version of the dependency plugin. See next question.</p>
      </answer>
    </faq>
    <faq id="question">
      <question>Why is Maven resolving "dependency:xxx" to the older org.codehaus.mojo:dependency-maven-plugin?</question>
      <answer><p>
        Due to a bug in Maven in versions prior to 2.0.7 (<a href="http://jira.codehaus.org/browse/MNG-2926">MNG-2926</a>), the search order was reversed and caused Mojo plugins to supercede ones with the same prefix at Apache.
        The metadata at Mojo was cleaned up when the maven-dependency-plugin was released at Apache. If you are still experiencing this error, chances are you have
        old metadata in your local repository or in a proxy / internal repository. Removing <code>/org/codehaus/mojo/maven-metadata.*</code> from your repo/proxy will cause it to
        be refreshed. Alternatively, you can specify the groupId explicitely in your pom (if you are using a bound goal), or on the command line, use groupId:artifactId:version:mojo, ie
        <code>mvn org.apache.maven.plugins:maven-dependency-plugin:2.5:unpack</code>
      </p>
      </answer>
    </faq>
    <faq id="includes">
      <question>Why am I having trouble unpacking only a specific file?</question>
      <answer><p>
        The excludes will override the includes declaration. That means if you specify excludes=**/* ,includes=**/foo,
        you will exclude everything. If you only want foo, then just specify the includes. The plexus component used to
        unpack uses the following code to determine which files to unpack: <code>return isIncluded( name ) AND !isExcluded( name );</code>
        </p>
      </answer>
    </faq>
    <faq id="unused">
      <question>Why does my dependency analysis report <code>Unused declared dependencies</code>?</question>
      <answer><p>
        By default, dependency analysis is done at bytecode level: anything that doesn't get into bytecode isn't detected.
        This is the case, for example, of constants, annotations with source retention policy, or javadoc links.</p>
        <p>If the only use of a dependency consists of such undetected constructs, the dependency is analyzed
        as unused. Since 2.6, you can force use report with <code>usedDependencies</code> parameter.</p>
      </answer>
    </faq>
  </part>
</faqs>
